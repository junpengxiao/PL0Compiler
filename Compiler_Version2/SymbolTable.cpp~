#include<stack>
#include<iostream>
#include <fstream>
#include<string>
#include "SymbolTable.h"
using namespace std;



SymbolItem::SymbolItem(std::string name,SymbolKind kind,SymbolType type,int value)
{
	this->name = name;
	this->kind = kind;
	this->type = type;
	this->value = value;
	this->offset = 0;
}
SymbolItem::SymbolItem(std::string name,SymbolKind kind,SymbolType type,string strvalue)
{
	this->name = name;
	this->kind = kind;
	this->type = type;
	this->strvalue = strvalue;
	this->offset = 0;
}
 void SymbolItem::SetOffset(int offset)
{
	this->offset = offset;
}
 int SymbolItem::GetOffset()
{
	return this->offset;
}
std::string SymbolItem::GetName()
{
	return this->name;
}
SymbolKind SymbolItem::GetKind()
{
	return this->kind;
}
 SymbolType SymbolItem::GetType()
{
	return this->type;
}
 int SymbolItem::GetValue()
{
	if (this->type != stringst) return this->value;
	//Throw Error of Trying to get integer value of a string object
    return 0;
}
 std::string SymbolItem::GetStrvalue()
{
	if (this->type != stringst) ;//throw try to get a sting value in integer value
	return this->strvalue;
}
 void SymbolItem::SetType(SymbolType type)
{
	this->type = type;
}
 int SymbolItem::GetSize()
{
	return this->size;
}
void SymbolItem::UpdateSize()
{
	if (type == integerst) this->size=4;
	if (type == charst) this->size=1;
	if (type == arrOfInt) this->size=this->value*4;
	if (type == arrOfCh) this->size=this->value;
	if (type == stringst) this->size=(int)strvalue.length();
}
void SymbolItem::UpdateSize(int n)
{
    this->size=n;
}
 void SymbolItem::SetValue(int value)
{
	if (this->kind!=constsk && this->type!=arrOfInt && this->type!=arrOfCh);//Warning : May assign value to a var
	this->value = value;
}
 void SymbolItem::SetValue(std::string strvalue)
{
	if (this->kind!=constsk) ;//Warning May assign a string to UN-string type;
	this->strvalue = strvalue;
}
SymbolTable::SymbolTable(int level,SymbolTable* father,string name,SymbolKind kind)
{
	this->level = level;
	this->father = father;
    this->kind = kind;
	if (level==0) this->father=NULL;
	this->label = 0;
    this->size = 0;
    this->name = name;
}
 int SymbolTable::GetLevel()
{
	return level;
}
 void SymbolTable::Push(std::string name,SymbolKind kind)
{
	if (!this->CheckingExist(name)) ;//Throw name exists.
        SymbolItem temp(name,kind,integerst,0);
	this->table.push_back(temp);
}
 void SymbolTable::Push(std::string name,SymbolKind kind,SymbolType type,int value)
{
	if (!this->CheckingExist(name)) ;//Throw name exists.
	SymbolItem temp(name,kind,type,value);
	this->table.push_back(temp);
} void SymbolTable::Push(std::string name,SymbolKind kind,SymbolType type,string strvalue)
{
	if (!this->CheckingExist(name)) ;//Throw name exists.
	SymbolItem temp(name,kind,type,strvalue);
	this->table.push_back(temp);
}
 void SymbolTable::Pop()
{
	if (this->table.size()==0) ; //Throw accessing undefined memory
	this->table.pop_back();
}
 SymbolItem SymbolTable::Top()
{
	if (this->table.size()==0) ;//throw accessing undefined memory;
	return (this->table.back());
}
 int SymbolTable::GetOffset(string name)
{
	for (int i=0;i!=this->table.size();++i) if (this->table[i].GetName()==name) return i;
	if (this->father!=NULL) return this->father->GetOffset(name);
	//Throw can not find this name
    return 0;
}
void SymbolTable::UpdateSize() {
    this->size=0;
    for (int i=0;i!=this->table.size();++i) size+=table[i].GetSize();
}
 void SymbolTable::SetType(SymbolType type)
{
	this->type=type;
}
 void SymbolTable::SetValue(int value)
{
	this->value=value;
}
 void SymbolTable::SetValue(string strvalue)
{
	this->strvalue=strvalue;
}
 void SymbolTable::SetTypeValue(SymbolType type, int value)
{
    this->SetType(type);
    this->SetValue(value);
}
 void SymbolTable::SetTypeValue(SymbolType type, string value)
{
    this->SetType(type);
    this->SetValue(value);
}
void SymbolTable::SetParaNum(int num) {
    this->paraNum = num;
}

 void SymbolTable::FillBack()
{
	for (;this->label != this->table.size();++(this->label))
	{
		this->table[label].SetType(this->type);
		if (this->type==stringst) this->table[label].SetValue(this->strvalue);
		else this->table[label].SetValue(this->value);
		if (label==0) table[label].SetOffset(0);
		else table[label].SetOffset(table[label-1].GetOffset()+table[label-1].GetSize());
		table[label].UpdateSize();
	}
}
 int SymbolTable::GetSize()
{
    return this->size;
}
bool SymbolTable::CheckingExist(string name) {
    for (int i=0;i!=this->table.size();++i) if (table[i].GetName()==name) return false;
    return true;
}
SymbolKind SymbolTable::GetKind() {
    return (this->kind);
}
SymbolItem* SymbolTable::GetItem(int i) {
    if (i<0) ;//Error index of get item should bigger than 1
    if (i>=this->table.size()) ;//Error index overflow
    return (&(this->table[i]));
}
SymbolItem* SymbolTable::GetItem(string name) {
    for (int i=0;i!=this->table.size();++i) if (this->table[i].GetName()==name) return (&(this->table[i]));
    if (this->father!=NULL) return (this->father->GetItem(name));
    return NULL ; //Error can not find a symbol named name...
}
string SymbolTable::GetName() {
    return this->name;
}
SymbolTable* SymbolTable::GetFather() {
    return this->father;
}
void SymbolTable::DisplayTable() {
    cout<<"---------------------DisplayTable "<<this->name<<" -----------------------------"<<endl;
    cout<<"Level: "<<level<<"\t\tSize: "<<size<<"\t\tNum of para: "<<paraNum<<endl;
    cout<<"Father: "<<(father==NULL?"NULL":father->GetName())<<"\t\tIs Func? "<< (kind==funcsk?"Yes":"No")<<"\t\tNum of Item: "<<table.size()<<endl;
    for (int i=0;i!=table.size();++i) {
	cout<<"Item: "<<table[i].GetName()<<"    Kind: ";
	switch (table[i].GetKind()) {
	    case constsk: cout<<"const"; break;
	    case varsk: cout<<"var"; break;
	    case parask: cout<<"para"; break;
	    case funcsk: cout<<"funct"; break;
	    case procsk: cout<<"proce"; break;
	}
	cout<<"    Type: ";
	switch (table[i].GetType()) {
	    case integerst: cout<<"int"; break;
	    case charst: cout<<"char"; break;
	    case stringst: cout<<"string"; break;
	    case arrOfInt: cout<<"array of int"; break;
	    case arrOfCh: cout<<"array of char"; break;
	}
	if (table[i].GetType()==stringst) cout<<"    Value: "<<table[i].GetStrvalue();
	else cout<<"    Value: "<<table[i].GetValue();
	cout<<"    Size: "<<table[i].GetSize()<<"    Offset: "<<table[i].GetOffset()<<endl;
    }
}     
